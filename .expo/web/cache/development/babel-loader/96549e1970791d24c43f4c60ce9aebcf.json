{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as app from \"firebase/app\";\nimport 'firebase/auth';\nimport 'firebase/database';\nvar firebaseConfig = {\n  apiKey: \"AIzaSyCuYnpqG2J9V9F5XG-JfK81ZcAXelIWPyo\",\n  authDomain: \"leruo-app.firebaseapp.com\",\n  projectId: \"leruo-app\",\n  storageBucket: \"leruo-app.appspot.com\",\n  messagingSenderId: \"188762033744\",\n  appId: \"1:188762033744:web:b4ca2d5f8983dee2430b55\",\n  measurementId: \"G-EQE7BZBH3L\"\n};\n\nvar Firebase = function Firebase() {\n  _classCallCheck(this, Firebase);\n\n  this.signInWithGoogle = function _callee() {\n    var res, user, query;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(auth.signInWithPopup(googleProvider));\n\n          case 3:\n            res = _context.sent;\n            user = res.user;\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(db.collection(\"users\").where(\"uid\", \"==\", user.uid).get());\n\n          case 7:\n            query = _context.sent;\n\n            if (!(query.docs.length === 0)) {\n              _context.next = 11;\n              break;\n            }\n\n            _context.next = 11;\n            return _regeneratorRuntime.awrap(db.collection(\"users\").add({\n              uid: user.uid,\n              name: user.displayName,\n              authProvider: \"google\",\n              email: user.email\n            }));\n\n          case 11:\n            _context.next = 17;\n            break;\n\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context[\"catch\"](0);\n            console.error(_context.t0);\n            alert(_context.t0.message);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 13]], Promise);\n  };\n\n  this.signInWithEmailAndPassword = function _callee2(email, password) {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(auth.signInWithEmailAndPassword(email, password));\n\n          case 3:\n            _context2.next = 9;\n            break;\n\n          case 5:\n            _context2.prev = 5;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.error(_context2.t0);\n            alert(_context2.t0.message);\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 5]], Promise);\n  };\n\n  this.registerWithEmailAndPassword = function _callee3(name, email, password) {\n    var res, user;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(auth.createUserWithEmailAndPassword(email, password));\n\n          case 3:\n            res = _context3.sent;\n            user = res.user;\n            _context3.next = 7;\n            return _regeneratorRuntime.awrap(db.collection(\"users\").add({\n              uid: user.uid,\n              name: name,\n              authProvider: \"local\",\n              email: email\n            }));\n\n          case 7:\n            _context3.next = 13;\n            break;\n\n          case 9:\n            _context3.prev = 9;\n            _context3.t0 = _context3[\"catch\"](0);\n            console.error(_context3.t0);\n            alert(_context3.t0.message);\n\n          case 13:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[0, 9]], Promise);\n  };\n\n  this.sendPasswordResetEmail = function _callee4(email) {\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            _context4.next = 3;\n            return _regeneratorRuntime.awrap(auth.sendPasswordResetEmail(email));\n\n          case 3:\n            alert(\"Password reset link sent!\");\n            _context4.next = 10;\n            break;\n\n          case 6:\n            _context4.prev = 6;\n            _context4.t0 = _context4[\"catch\"](0);\n            console.error(_context4.t0);\n            alert(_context4.t0.message);\n\n          case 10:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, [[0, 6]], Promise);\n  };\n\n  this.logout = function () {\n    auth.signOut();\n  };\n\n  app.initializeApp(firebaseConfig);\n  this.auth = app.auth();\n  this.db = app.database();\n};\n\nexport default Firebase;","map":{"version":3,"sources":["/home/jones/Videos/react native projects/Leruo/src/core/Firebase.js"],"names":["app","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","Firebase","signInWithGoogle","auth","signInWithPopup","googleProvider","res","user","db","collection","where","uid","get","query","docs","length","add","name","displayName","authProvider","email","console","error","alert","message","signInWithEmailAndPassword","password","registerWithEmailAndPassword","createUserWithEmailAndPassword","sendPasswordResetEmail","logout","signOut","initializeApp","database"],"mappings":"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","sourcesContent":["import * as app from \"firebase/app\";\nimport 'firebase/auth';\nimport 'firebase/database';\n\nconst firebaseConfig = {\n apiKey: \"AIzaSyCuYnpqG2J9V9F5XG-JfK81ZcAXelIWPyo\",\n  authDomain: \"leruo-app.firebaseapp.com\",\n  projectId: \"leruo-app\",\n  storageBucket: \"leruo-app.appspot.com\",\n  messagingSenderId: \"188762033744\",\n  appId: \"1:188762033744:web:b4ca2d5f8983dee2430b55\",\n  measurementId: \"G-EQE7BZBH3L\"\n}\n\nclass Firebase {\n    constructor() {\n      app.initializeApp(firebaseConfig);\n\n        /* Firebase APIs */\n\n    this.auth = app.auth();\n    this.db = app.database();\n    }\n\n signInWithGoogle = async () => {\n  try {\n    const res = await auth.signInWithPopup(googleProvider);\n    const user = res.user;\n    const query = await db\n      .collection(\"users\")\n      .where(\"uid\", \"==\", user.uid)\n      .get();\n    if (query.docs.length === 0) {\n      await db.collection(\"users\").add({\n        uid: user.uid,\n        name: user.displayName,\n        authProvider: \"google\",\n        email: user.email,\n      });\n    }\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\n signInWithEmailAndPassword = async (email, password) => {\n  try {\n    await auth.signInWithEmailAndPassword(email, password);\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\n registerWithEmailAndPassword = async (name, email, password) => {\n  try {\n    const res = await auth.createUserWithEmailAndPassword(email, password);\n    const user = res.user;\n    await db.collection(\"users\").add({\n      uid: user.uid,\n      name,\n      authProvider: \"local\",\n      email,\n    });\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\n sendPasswordResetEmail = async (email) => {\n  try {\n    await auth.sendPasswordResetEmail(email);\n    alert(\"Password reset link sent!\");\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\n logout = () => {\n  auth.signOut();\n};\n\n\n\n\n    }   \n\n// const app =  app.initializeApp(firebaseConfig);\n// const auth = app.auth();\n// const db = app.firestore();\n// const googleProvider = new firebase.auth.GoogleAuthProvider();\n// const signInWithGoogle = async () => {\n//   try {\n//     const res = await auth.signInWithPopup(googleProvider);\n//     const user = res.user;\n//     const query = await db\n//       .collection(\"users\")\n//       .where(\"uid\", \"==\", user.uid)\n//       .get();\n//     if (query.docs.length === 0) {\n//       await db.collection(\"users\").add({\n//         uid: user.uid,\n//         name: user.displayName,\n//         authProvider: \"google\",\n//         email: user.email,\n//       });\n//     }\n//   } catch (err) {\n//     console.error(err);\n//     alert(err.message);\n//   }\n// };\n// const signInWithEmailAndPassword = async (email, password) => {\n//   try {\n//     await auth.signInWithEmailAndPassword(email, password);\n//   } catch (err) {\n//     console.error(err);\n//     alert(err.message);\n//   }\n// };\n// const registerWithEmailAndPassword = async (name, email, password) => {\n//   try {\n//     const res = await auth.createUserWithEmailAndPassword(email, password);\n//     const user = res.user;\n//     await db.collection(\"users\").add({\n//       uid: user.uid,\n//       name,\n//       authProvider: \"local\",\n//       email,\n//     });\n//   } catch (err) {\n//     console.error(err);\n//     alert(err.message);\n//   }\n// };\n// const sendPasswordResetEmail = async (email) => {\n//   try {\n//     await auth.sendPasswordResetEmail(email);\n//     alert(\"Password reset link sent!\");\n//   } catch (err) {\n//     console.error(err);\n//     alert(err.message);\n//   }\n// };\n// const logout = () => {\n//   auth.signOut();\n// };\n// export {\n//   auth,\n//   db,\n//   signInWithGoogle,\n//   signInWithEmailAndPassword,\n//   registerWithEmailAndPassword,\n//   sendPasswordResetEmail,\n//   logout,\n// };\n\n\nexport default Firebase;"]},"metadata":{},"sourceType":"module"}